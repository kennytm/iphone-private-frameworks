/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/PhotoLibrary.framework/PhotoLibrary
 */

#import "PhotoLibrary-Structs.h"
#import <UIKit/UIView.h>
#import "PLItemView.h"
#import "UIMovieScrubberDelegate.h"
#import "UIMovieScrubberDataSource.h"

@class UIMovieScrubber, NSTimer, NSMutableDictionary, MLPhotoBakedThumbnails, AVRemaker, MLPhoto, PLVideoEditingOverlayView, PLImageTile, NSArray, PLMoviePlayerController, NSString, UIImageView, NSDictionary, UIButton;
@protocol PLVideoViewDelegate;

@interface PLVideoView : UIView <UIMovieScrubberDelegate, UIMovieScrubberDataSource, PLItemView> {
	MLPhoto* _videoCameraImage;
	PLImageTile* _imageTile;
	UIImageView* _posterFrameView;
	UIButton* _videoOverlayPlayButton;
	PLVideoEditingOverlayView* _trimMessageView;
	unsigned _scaleMode;
	UIImageView* _scrubberBackgroundView;
	UIMovieScrubber* _scrubber;
	NSTimer* _scrubberUpdateTimer;
	NSDictionary* _thumbnailOptionsDict;
	NSMutableDictionary* _cachedThumbnails;
	MLPhotoBakedThumbnails* _bakedLandscapeThumbnails;
	MLPhotoBakedThumbnails* _bakedPortraitThumbnails;
	AVRemaker* _remaker;
	int _timeOptions;
	NSString* _trimmedPath;
	NSTimer* _trimProgressTimer;
	XXStruct_z8YKPA* _trimProgressStack;
	float _progress;
	int _interfaceOrientation;
	PLMoviePlayerController* _moviePlayer;
	int _orientationWhenLastDisplayed;
	id<PLVideoViewDelegate> _delegate;
	double _maximumTrimLength;
	double _lastScrubbedValue;
	double _lastActualValue;
	double _duration;
	NSMutableDictionary* _thumbnailRequests;
	unsigned _currentThumbnailRequestID;
	unsigned _previewFrameRequestID;
	NSArray* _portraitSummaryThumbnailTimestamps;
	NSArray* _landscapeSummaryThumbnailTimestamps;
	unsigned _didLayout : 1;
	unsigned _wasPlayingBeforeScrub : 1;
	unsigned _playFromBeginning : 1;
	unsigned _reloadScrubberThumbnails : 1;
	unsigned _playing : 1;
	unsigned _editing : 1;
	unsigned _canEdit : 1;
	unsigned _disableEditAfterTrim : 1;
	unsigned _scrubbing : 1;
	unsigned _scrubbingToRight : 1;
	unsigned _showsPosterFrame : 1;
	unsigned _deleteOriginalFile : 1;
	unsigned _passthroughTrimming : 1;
	unsigned _preparingMoviePlayer : 1;
	unsigned _didPrepareMoviePlayer : 1;
	unsigned _canShowOverlay : 1;
	unsigned _showingOverlay : 1;
	unsigned _showingScrubber : 1;
	unsigned _showScrubberWhenMovieIsReady : 1;
	unsigned _playbackDidBegin : 1;
	unsigned _playbackWillBegin : 1;
	unsigned _didDisappear : 1;
	unsigned _loadScrubberThumbnails : 1;
	unsigned _loadMediaImmediately : 1;
	unsigned _displayingToTVOut : 1;
	unsigned _videoIsLandscape : 1;
	unsigned _canCreateMetadata : 1;
	unsigned _createPreviewPosterFrame : 1;
}
@property(readonly, assign, nonatomic) int interfaceOrientation;
@property(readonly, assign, nonatomic) UIView* previewImageView;
@property(readonly, assign, nonatomic) double endTime;
@property(readonly, assign, nonatomic) double startTime;
@property(assign, nonatomic, getter=isEditing) BOOL editing;
@property(readonly, assign, nonatomic) double duration;
@property(assign, nonatomic) BOOL isDisplayingToTVOut;
@property(assign, nonatomic) BOOL canEdit;
@property(assign, nonatomic) BOOL loadMediaImmediately;
@property(assign, nonatomic) BOOL showsPosterFrame;
@property(readonly, assign, nonatomic) MLPhoto* videoCameraImage;
@property(assign, nonatomic) PLImageTile* imageTile;
@property(assign, nonatomic) id<PLVideoViewDelegate> delegate;
-(instancetype)initWithFrame:(CGRect)frame videoCameraImage:(id)image orientation:(int)orientation;
// inherited: -(void)dealloc;
// in a protocol: -(id)description;
// inherited: -(void)touchesBegan:(id)began withEvent:(id)event;
// inherited: -(void)touchesMoved:(id)moved withEvent:(id)event;
// inherited: -(void)touchesEnded:(id)ended withEvent:(id)event;
// inherited: -(void)mouseDown:(GSEventRef)down;
// inherited: -(void)mouseUp:(GSEventRef)up;
// inherited: -(void)mouseDragged:(GSEventRef)dragged;
-(BOOL)_alwaysHandleScrollerMouseEvent;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(float)_scrubberYOffsetForOrientation:(int)orientation;
-(void)_createScrubber:(BOOL)scrubber;
-(void)_showVideoOverlay;
-(void)_videoOverlayFadeOutDidFinish;
-(void)_hideVideoOverlay:(BOOL)overlay;
-(void)_hideTrimMessageView:(BOOL)view;
-(void)_updateScrubberVisibility:(BOOL)visibility;
-(void)_updatePosterContentMode;
-(void)_setScaleModeForSize:(CGSize)size;
-(BOOL)_canCreateMetadata;
-(void)layoutSubviews;
-(void)_fileGroupContentsDidChange:(id)_fileGroupContents;
-(void)_itemPlaybackDidEnd:(id)_itemPlayback;
-(void)_reloadScrubberThumbnails;
-(BOOL)moviePlayerExitRequest:(id)request exitReason:(int)reason;
-(void)moviePlayerPlaybackStateDidChange:(id)moviePlayerPlaybackState;
-(void)_requestPreviewPosterFrameForVideoSize:(CGSize)videoSize;
-(void)_savePreviewPosterFrameImage:(CGImageRef)image;
-(void)moviePlayerReadyToBeginPlayback:(id)beginPlayback;
-(void)moviePlayerDelegateDidChange:(id)moviePlayerDelegate;
-(BOOL)moviePlayerHeadsetPlayPausePressed:(id)pressed;
// in a protocol: -(double)movieScrubberDuration:(id)duration;
// in a protocol: -(id)movieScrubber:(id)scrubber evenlySpacedTimestamps:(int)timestamps startingAt:(id)at endingAt:(id)at4;
// in a protocol: -(id)movieScrubber:(id)scrubber timestampsStartingAt:(id)at endingAt:(id)at3 maxCount:(int)count;
-(void)_saveCachedThumbnailsIfNecessary;
-(void)_thumbnailImageWasGenerated:(id)generated;
-(void)_thumbnailImageGenerationFailed:(id)failed;
// in a protocol: -(void)movieScrubber:(id)scrubber requestThumbnailImageForTimestamp:(id)timestamp;
-(id)_loadThumbnailsIntoDictionary:(id)dictionary isLandscape:(BOOL)landscape aspectRatio:(float)ratio;
// in a protocol: -(float)movieScrubberThumbnailAspectRatio:(id)ratio;
-(void)_removeScrubberUpdateTimer;
-(void)_resetScrubberUpdateTimer;
// in a protocol: -(void)movieScrubberDidBeginScrubbing:(id)movieScrubber withHandle:(int)handle;
// in a protocol: -(void)movieScrubberDidEndScrubbing:(id)movieScrubber withHandle:(int)handle;
-(void)_didScrubToValue:(double)value withHandle:(int)handle;
// in a protocol: -(void)movieScrubber:(id)scrubber valueDidChange:(double)value;
// in a protocol: -(void)movieScrubber:(id)scrubber editingStartValueDidChange:(double)editingStartValue;
// in a protocol: -(void)movieScrubber:(id)scrubber editingEndValueDidChange:(double)editingEndValue;
// in a protocol: -(void)movieScrubberWillBeginRequestingThumbnails:(id)movieScrubber;
// in a protocol: -(void)movieScrubberDidFinishRequestingThumbnails:(id)movieScrubber;
// in a protocol: -(void)movieScrubberDidBeginEditing:(id)movieScrubber;
-(void)setMaximumTrimLength:(double)length;
-(void)showTrimMessage:(id)message withBottomY:(float)bottomY;
-(void)hideTrimMessage;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)_reset;
// in a protocol: -(void)movieScrubberEditingAnimationFinished:(id)finished;
-(void)_scrubberAnimationFinished;
-(void)_thumbnailsWereRegenerated:(id)regenerated error:(id)error contextInfo:(void*)info;
-(void)_removeTrimProgressTimer;
-(void)_resetTrimProgressTimer;
-(void)_updateTrimProgress;
-(void)setProgress:(id)progress;
-(void)_remakerDidFinish:(id)_remaker;
-(void)trimUsingMode:(int)mode passthrough:(BOOL)passthrough saveACopy:(BOOL)copy;
-(void)cancelTrim;
-(id)createPreviewImageData:(id*)data fullScreenImage:(id*)image;
-(void)toggleScaleMode:(float)mode;
-(void)handleDoubleTap;
-(BOOL)isPlaying;
-(void)_willBeginPlayback;
-(void)playButtonClicked:(id)clicked;
-(void)play;
-(void)pause;
-(void)stop;
-(void)hideScrubberBackgroundViewWithDuration:(float)duration;
-(void)showScrubberBackgroundViewWithDuration:(float)duration;
-(void)viewWillAppearWithoutAnimation;
-(void)_viewDidAppear:(BOOL)_view;
-(void)viewDidAppear;
-(void)viewDidDisappear;
-(void)setFrame:(CGRect)frame;
-(void)willMoveToSuperview:(id)superview;
-(BOOL)_canEditDuration:(double)duration;
-(BOOL)shouldShowCopyCalloutAtPoint:(CGPoint)point;
-(id)_moviePlayer;
-(void)_prepareMoviePlayer;
-(void)_playbackFinished;
-(void)_updateScrubberValue;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation fromInterfaceOrientation:(int)interfaceOrientation2 duration:(double)duration;
// in a protocol: -(void)updateZoomScales;
// in a protocol: -(BOOL)isZoomedOut;
// in a protocol: -(float)defaultZoomScale;
// in a protocol: -(float)_zoomScale;
// in a protocol: -(void)_setZoomScale:(float)scale duration:(double)duration;
// in a protocol: -(float)minRotatedScale;
// in a protocol: -(int)orientationWhenLastDisplayed;
// in a protocol: -(void)setOrientationWhenLastDisplayed:(int)displayed;
@end

