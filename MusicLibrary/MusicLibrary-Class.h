/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "MusicLibrary-Structs.h"
#import <Foundation/NSObject.h>
#import "MusicLibrary.h"

@class NSString, NSDictionary;

@interface MusicLibrary : NSObject {
@private
	NSString* _basePath;
	void* _bridge;
	unsigned _needsFlush : 1;
	unsigned _skippedUpdatePurchasedContent : 1;
	unsigned _disableExternalPlaylistNotifications : 1;
	unsigned _autoflushScheduled : 1;
	double _autoflushTargetTime;
	NSDictionary* _purchasedContentFolders;
}
+(void)_postDatabaseChangeNotificationName:(id)name changeType:(int)type;
+(void)postDatabaseContentsWillChangeNotification:(int)postDatabaseContents;
+(void)postDatabaseContentsDidChangeNotification:(int)postDatabaseContents;
+(void)initialize;
+(Class)sharedMusicLibraryClass;
+(id)dbModDate;
+(unsigned long long)syncGenerationID;
+(id)iTunesLibraryPackageDBTempFolder;
+(BOOL)databaseDataFilesExist;
+(void)beginDatabaseMigrationIfNecessary;
+(void)noteDBSyncIsActive;
+(BOOL)isDBSyncActive;
+(void)dbSyncWillBegin;
+(void)dbSyncDidEnd;
+(BOOL)hasContent;
+(void)_dumpDebuggingInfo;
+(void)dumpDebuggingInfo;
+(BOOL)syncDebugEnabled;
+(void)_setSharedMusicLibrary:(id)library;
+(void)_beginCreatingSharedInstance;
+(void)_endCreatingSharedInstance;
+(id)_sharedMusicLibrary:(BOOL)library;
+(id)sharedMusicLibraryIfExists;
+(id)sharedMusicLibrary;
+(void)setIsTesting:(BOOL)testing;
+(BOOL)isTesting;
+(BOOL)sharedMusicLibraryExists;
+(void)updateActivePlaylistNamesForCurrentLanguage;
+(BOOL)updatePurchasedContent;
+(void)resetLibrary;
+(void)flushPreparedStatementCache;
+(void)jetsamMemory;
+(void)disableFlush;
+(void)enableFlush;
+(BOOL)isFlushEnabled;
+(BOOL)flush;
+(void)commitAllDeferredWork;
+(id)copyPurchaseContentFolderMapWithDelegate:(id)delegate;
+(id)purchasedContentXMLFilenames;
+(id)copyLocalizedStringForITTGLocString:(int)ittglocString;
+(int)filenameFormatResourceForPlaylistType:(int)playlistType;
+(id)controlDirectoryPathWithBasePath:(id)basePath;
+(id)mediaFolderRelativePath:(id)path;
+(id)geniusDatabasePath;
+(id)pathForResourceFileOrFolder:(int)resourceFileOrFolder basePath:(id)path relativeToBase:(BOOL)base isFolder:(BOOL*)folder;
+(id)pathForResourceFileOrFolder:(int)resourceFileOrFolder basePath:(id)path relativeToBase:(BOOL)base;
+(id)pathForResourceFileOrFolder:(int)resourceFileOrFolder;
+(id)pathForResourceFileOrFolder:(int)resourceFileOrFolder basePath:(id)path createParentFolderIfNecessary:(BOOL)necessary;
+(void)checkForControlDirectoryLocationWithBasePath:(id)basePath;
-(instancetype)initWithBasePath:(id)basePath;
-(id)basePath;
-(void)dealloc;
-(void)_dumpDebuggingInfoAfterInit;
-(void)_dumpDebuggingInfo;
-(void)updateActivePlaylistNamesForCurrentLanguage;
-(void)flushPreparedStatementCacheImpl;
-(void)jetsamMemoryImpl;
-(void)scheduleAutoflushWithInterval:(double)interval;
-(void)_cancelAutoflush;
-(void)_autoflush;
-(BOOL)flush;
-(void)commitAllDeferredWork;
-(MLArtworkFormatSpec)formatSpecForArtworkFormatID:(unsigned)artworkFormatID;
-(unsigned)countOfAllVideoTracks;
-(unsigned)countOfAllAudioTracks;
-(BOOL)countOfAllVideoTracksIsNonZero;
-(BOOL)countOfAllAudioTracksIsNonZero;
-(id)_getPurchaseContentFolders;
-(id)purchasedContentFolders;
-(id)purchasedContentFolderMap;
-(unsigned)countOfPurchasedContent;
-(BOOL)_dbUpdatePurchasedContent;
-(id)_debugGetTracksStartingAtTrackWithPersistentID:(unsigned long long)persistentID maxTracks:(unsigned)tracks stride:(int)stride;
-(id)getPlaylistWithUniqueID:(unsigned)uniqueID visibleOnly:(BOOL)only;
-(id)getPlaylistWithPersistentUID:(unsigned long long)persistentUID visibleOnly:(BOOL)only;
-(unsigned)maximumGeniusPlaylistTrackCount;
-(unsigned)minimumGeniusPlaylistTrackCount;
-(void)ensureSpecialUserPlaylistsExist;
-(void)debugLogPerfStatistics;
-(id)pathForResourceFileOrFolder:(int)resourceFileOrFolder;
-(id)pathForResourceFileOrFolder:(int)resourceFileOrFolder createParentFolderIfNecessary:(BOOL)necessary;
-(id)localizedSectionHeaderForSectionHeader:(id)sectionHeader;
-(id)localizedSectionIndexForSectionHeader:(id)sectionHeader;
-(id)sectionIndices;
-(id)sectionIndexEllipsis;
-(id)sectionIndexForSectionHeader:(id)sectionHeader;
@end

@interface MusicLibrary (MLMusicLibraryPlaylistMutation)
-(void)trackDynamicPropertyWillChange:(id)trackDynamicProperty propertySelector:(SEL)selector;
-(void)trackDynamicPropertyDidChange:(id)trackDynamicProperty propertySelector:(SEL)selector;
-(void)postAvailablePlaylistsWillChangeWithUserInfo:(id)postAvailablePlaylists;
-(void)postAvailablePlaylistsDidChangeWithUserInfo:(id)postAvailablePlaylists;
-(void)mutatePlaylist:(id)playlist insertEntitiesFromQuery:(id)query entityIndexes:(id)indexes atIndex:(unsigned)index postNotifications:(BOOL)notifications;
-(void)mutatePlaylist:(id)playlist insertTracks:(id)tracks atIndex:(unsigned)index postNotifications:(BOOL)notifications;
-(void)mutatePlaylist:(id)playlist replaceEntitiesInRange:(NSRange)range withTracks:(id)tracks postNotifications:(BOOL)notifications;
-(void)mutatePlaylist:(id)playlist removeTracksInRange:(NSRange)range postNotifications:(BOOL)notifications;
-(void)mutatePlaylist:(id)playlist moveEntitiesFromRange:(NSRange)range toIndex:(unsigned)index postNotifications:(BOOL)notifications;
-(void)prepareForSavingPlaylist:(id)savingPlaylist;
-(void)scheduleFlushDatabase;
-(void)scheduleSavingPlaylist:(id)playlist;
-(void)noteSaveablePlaylistAttributesWillMutate:(id)noteSaveablePlaylistAttributes;
-(void)noteSaveablePlaylistAttributesMutated:(id)mutated;
-(void)noteWillAddPlaylist;
-(void)notePlaylistAdded:(id)added;
-(void)notePlaylistsRemoved:(id)removed;
-(id)_preparedPlaylistChangeUserInfoForDeletionRange:(NSRange)deletionRange insertionRange:(NSRange)range;
-(void)notePlaylistContentsWillMutate:(id)notePlaylistContents userInfo:(id)info saveableChange:(BOOL)change;
-(void)notePlaylistContentsDidMutate:(id)notePlaylistContents userInfo:(id)info saveableChange:(BOOL)change;
-(void)notePlaylistContentsWillMutate:(id)notePlaylistContents deletionRange:(NSRange)range insertionRange:(NSRange)range3;
-(void)notePlaylistContentsDidMutate:(id)notePlaylistContents deletionRange:(NSRange)range insertionRange:(NSRange)range3;
-(void)notePlaylistContentsWillMutate:(id)notePlaylistContents willMoveItemsFromRange:(NSRange)range toIndex:(unsigned)index;
-(void)notePlaylistContentsDidMutate:(id)notePlaylistContents didMoveItemsFromRange:(NSRange)range toIndex:(unsigned)index;
-(void)notePlaylistContentsWillMutate:(id)notePlaylistContents willReplaceItemsInRange:(NSRange)range withInsertionCount:(unsigned)insertionCount;
-(void)notePlaylistContentsDidMutate:(id)notePlaylistContents didReplaceItemsInRange:(NSRange)range withInsertionCount:(unsigned)insertionCount;
@end

@interface MusicLibrary (Setup)
+(Class)sharedMusicLibraryClass;
@end

