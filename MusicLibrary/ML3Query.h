/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "MusicLibrary-Structs.h"
#import "NSFastEnumeration.h"
#import <Foundation/NSObject.h>

@class ML3AggregateQuery, NSArray, NSMutableArray, ML3MusicLibrary, ML3Predicate, NSString, NSLock, NSMutableIndexSet, ML3QueryLoadOperation;

@interface ML3Query : NSObject <NSFastEnumeration> {
@private
	ML3MusicLibrary* _library;
	Class _entityClass;
	ML3Predicate* _predicate;
	NSArray* _orderingProperties;
	BOOL _usingSections;
	NSLock* _sectionsLock;
	NSMutableArray* _sections;
	NSLock* _loadedArrayLock;
	unsigned _loadedArrayCapacity;
	NSMutableIndexSet* _loadedArrayIndexSet;
	long long* _loadedPersistentIDArray;
	NSMutableIndexSet* _loadedAggregateCountArray;
	unsigned* _loadedAggregatedCountArray;
	BOOL _hasLoadedEveryPersistentID;
	int _loadedCountOnlyCount;
	BOOL _hasLoadedCountOnlyCount;
	ML3AggregateQuery* _nonDirectAggregateQuery;
	NSString* _selectPersistentIDsSQLWithLimitClause;
	NSString* _selectPersistentIDsSQLWithoutLimitClause;
}
@property(readonly, assign) Class entityClass;
@property(readonly, assign) ML3Predicate* predicate;
@property(readonly, assign) NSArray* orderingProperties;
@property(readonly, assign) ML3MusicLibrary* library;
@property(readonly, assign) BOOL usingSections;
@property(assign) BOOL hasLoadedEveryPersistentID;
@property(assign) int loadedCountOnlyCount;
@property(assign) BOOL hasLoadedCountOnlyCount;
@property(readonly, assign) ML3AggregateQuery* nonDirectAggregateQuery;
@property(readonly, assign) ML3QueryLoadOperation* loadSectionsOperation;
@property(readonly, assign) ML3QueryLoadOperation* loadEntitiesOperation;
@property(readonly, assign, getter=areSectionsLoaded) BOOL sectionsLoaded;
@property(retain) NSArray* sections;
@property(readonly, assign) unsigned countOfEntities;
@property(readonly, assign) unsigned countOfEntitiesNoLoad;
@property(readonly, assign) BOOL hasEntities;
-(instancetype)initWithLibrary:(id)library entityClass:(Class)aClass predicate:(id)predicate orderingProperties:(id)properties usingSections:(BOOL)sections nonDirectAggregateQuery:(id)query;
-(void)dealloc;
-(id)description;
-(BOOL)_countByPersistentIDs:(unsigned*)ids loadIfNecessary:(BOOL)necessary;
-(BOOL)_countBySections:(unsigned*)sections loadIfNecessary:(BOOL)necessary;
-(BOOL)_countByCountOnly:(unsigned*)only loadIfNecessary:(BOOL)necessary;
-(void)loadAllEntities;
-(BOOL)hasLoadedEntityAtIndex:(unsigned)index;
-(BOOL)hasLoadedEntitesInRange:(NSRange)range;
-(void)loadEntityAtIndex:(unsigned)index;
-(void)loadAggregateCountForEntityAtIndex:(unsigned)index;
-(void)visitGroupMembersOfEntityAtIndex:(unsigned)index visitor:(/*function-pointer*/ void*)visitor context:(void*)context;
-(BOOL)getAggregatedCount:(unsigned*)count atIndex:(unsigned)index;
-(BOOL)getPersistentID:(long long*)anId atIndex:(unsigned)index;
-(id)entityAtIndex:(unsigned)index;
-(id)loadCountOnlyOperation;
-(id)loadEntitiesOperationForRange:(NSRange)range;
-(id)loadEntitiesOperationForRange:(NSRange)range ordered:(BOOL)ordered;
-(id)persistentIDProperty;
-(BOOL)distinctPersistentIDProperty;
-(unsigned)indexOfEntity:(id)entity;
-(unsigned)indexOfPersistentID:(long long)persistentID;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(id)selectSQLWithColumns:(id)columns groupBy:(id)by;
-(id)selectSQLWithColumns:(id)columns orderingProperties:(id)properties directionality:(id)directionality;
-(id)selectSQLWithColumns:(id)columns orderingProperties:(id)properties;
-(id)selectSQLWithColumns:(id)columns groupBy:(id)by orderingProperties:(id)properties;
-(id)selectSQLWithColumns:(id)columns groupBy:(id)by orderingProperties:(id)properties directionality:(id)directionality;
-(id)selectSectionsSQL;
-(void)bindToSectionsSqlite3Statement:(sqlite3_stmt*)sectionsSqlite3Statement bindingIndex:(inout int*)index;
-(id)selectUnorderedPersistentIDsSQL;
-(id)selectPersistentIDsSQL;
-(void)bindToPersistentIDsSqlite3Statement:(sqlite3_stmt*)persistentIDsSqlite3Statement bindingIndex:(inout int*)index;
-(id)selectCountSQL;
-(void)bindToCountSqlite3Statement:(sqlite3_stmt*)countSqlite3Statement bindingIndex:(inout int*)index;
-(id)sectionProperty;
-(void)growLoadedArraysForIndex:(unsigned)index;
-(void)insertLoadedAggregatedCount:(unsigned)count atIndex:(unsigned)index;
-(void)insertLoadedPersistentID:(long long)anId atIndex:(unsigned)index;
-(void)loadedAllPersisentIDs;
@end

