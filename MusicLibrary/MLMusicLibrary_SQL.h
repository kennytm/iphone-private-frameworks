/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

#import "MusicLibrary-Structs.h"
#import "MLMusicLibrarySubclassImpl.h"
#import "MusicLibrary.h"

@class NSMutableArray;

@interface MLMusicLibrary_SQL : MusicLibrary <MLMusicLibrarySubclassImpl> {
@private
	CPRecordStoreRef _storeRef;
	long long _lastRowid;
	BOOL _markAndDeleteTracksInProgress;
	NSMutableArray* _markAndDeleteTracksPendingQueue;
}
+(CPRecordStoreRef)_sharedInstanceStoreRef;
+(void)noteSharedRecordStoreChangedToStoreRef:(CPRecordStoreRef)storeRef;
+(id)geniusDatabasePath;
+(unsigned long long)syncGenerationID;
+(void)recursiveEvaluationLockLock;
+(void)recursiveEvaluationLockUnlock;
+(Class)implClassForEvaluatingQuery:(id)evaluatingQuery;
+(BOOL)databaseDataFilesExist;
+(void)beginDatabaseMigrationIfNecessary;
+(void)resetLibrary;
+(void)noteItemTableWasModified;
+(BOOL)hasContent;
+(void)_dbSyncWillBegin;
+(void)_dbSyncDidEnd;
+(id)_nextFilepathForPlaylistOfType:(int)type;
+(void)_dbSaveCoalesceBegin;
+(void)_dbSaveCoalesceEnd;
-(void)_loadMainStore;
-(CPRecordStoreRef)_storeRef;
-(void)noteSharedRecordStoreChangedToStoreRef:(CPRecordStoreRef)storeRef;
-(void)jetsamMemoryImpl;
-(void)memoryLevelDidChange;
-(instancetype)initWithBasePath:(id)basePath;
-(void)dealloc;
-(void)_loadPurchaseData;
-(void)postInitSetup;
-(id)imageDataForTrack:(id)track artworkType:(int)type artworkFormatID:(unsigned)anId size:(CGSize)size artworkInstanceInfo:(MLArtworkInstanceInfo*)info;
-(id)imageDataForTrack:(id)track artworkType:(int)type artworkFormatID:(unsigned)anId size:(CGSize)size chapterIndex:(unsigned)index chapterTOC:(id)toc artworkInstanceInfo:(MLArtworkInstanceInfo*)info;
-(id)availableArtworkFormatIDsForTrack:(id)track artworkType:(int)type;
-(id)availableArtworkFormatIDsForTrack:(id)track artworkType:(int)type chapterIndex:(unsigned)index chapterTOC:(id)toc;
-(id)getTrackWithPersistentID:(unsigned long long)persistentID visibleOnly:(BOOL)only;
-(id)getTrackWithGlobalID:(unsigned long long)globalID visibleOnly:(BOOL)only;
-(id)preferredAudioTracks;
-(id)preferredSubtitleTracks;
-(BOOL)hasAnyVideos;
-(BOOL)hasMusicVideos;
-(BOOL)hasAudibleAudioBooks;
-(BOOL)hasAudioBooks;
-(BOOL)_hasEntitiesWithMediaType:(unsigned long)mediaType whenGroupedByProperty:(unsigned long)property additionalPredicates:(id)predicates;
-(BOOL)_hasEntitiesWithMediaType:(unsigned long)mediaType whenGroupedByProperty:(unsigned long)property;
-(BOOL)hasCompilations;
-(BOOL)hasPodcasts;
-(BOOL)hasComposers;
-(BOOL)hasAlbums;
-(BOOL)hasArtists;
-(BOOL)hasGenres;
-(BOOL)hasSongs;
-(BOOL)hasPlaylists;
-(BOOL)hasITunesUContent;
-(BOOL)_hasPlaylistOfDistinguishedKind:(int)distinguishedKind hidden:(BOOL)hidden;
-(BOOL)hasGeniusMixes;
-(BOOL)hasMovies;
-(BOOL)hasRentals;
-(BOOL)hasTVShows;
-(BOOL)hasVideoPodcasts;
-(void)_preloadNextItemChunk;
-(void)beginPreloadingItems;
-(void)endPreloadingItems;
-(void)_updateTrackDict:(id)dict withInformationFromTrackWithPersisentID:(id)persisentID;
-(void)_saveTrackMetadata;
-(void)_savePlaylists;
-(void)updateActivePlaylistNamesForCurrentLanguage;
-(BOOL)flushImplNow;
-(void)commitAllDeferredWork;
-(BOOL)markAndDeleteTracks:(id)tracks;
-(BOOL)markHiddenTracks:(id)tracks hidden:(BOOL)hidden;
-(void)flushPreparedStatementCacheImpl;
-(void)loadArtwork;
-(void)unloadArtwork;
-(void)_dbSyncDidEnd;
-(id)_activeDistinguishedPlaylistOfType:(int)type localizedName:(int)name localizedNameFallbackFormat:(int)format;
-(id)activeOnTheGoPlaylist;
-(id)activeGeniusPlaylist;
-(id)purchasedItemsPlaylist;
-(id)addPlaylistWithName:(id)name;
-(BOOL)deletePlaylists:(id)playlists;
-(void)writePlaylistToSavedFile:(id)savedFile;
-(void)mutatePlaylistChangeGroupBegin;
-(void)mutatePlaylistChangeGroupEnd;
-(void)mutatePlaylistImpl:(id)impl insertTracksWithRecordIDs:(CPRecordIDArrayRef)recordIDs atIndex:(unsigned)index;
-(void)mutatePlaylistImpl:(id)impl insertTracks:(id)tracks atIndex:(unsigned)index;
-(void)addRecordIDsForTracksFromQuery:(id)query entityRange:(NSRange)range toArray:(CPRecordIDArrayRef)array;
-(void)mutatePlaylistImpl:(id)impl insertEntitiesFromQuery:(id)query entityIndexes:(id)indexes atIndex:(unsigned)index postNotifications:(BOOL)notifications;
-(void)mutatePlaylistImpl:(id)impl removeTracksInRange:(NSRange)range;
-(void)mutatePlaylistImpl:(id)impl moveEntitiesFromRange:(NSRange)range toIndex:(unsigned)index;
-(void)purchasedContentFolder:(id)folder willProcessItemWithXMLFilenames:(id)xmlfilenames;
-(void)purchasedContentFolder:(id)folder didProcessItemWithXMLFilenames:(id)xmlfilenames;
-(void)trackDynamicPropertyDidChange:(id)trackDynamicProperty propertySelector:(SEL)selector;
-(id)insertItemFromPurchaseFolder:(id)purchaseFolder withItemProperties:(id)itemProperties;
-(BOOL)purchasedContentFolder:(id)folder loadItemWithProperties:(id)properties propertiesToSave:(id*)save;
-(id)getPlaylistWithUniqueID:(unsigned)uniqueID visibleOnly:(BOOL)only;
-(id)getPlaylistWithPersistentUID:(unsigned long long)persistentUID visibleOnly:(BOOL)only;
@end

