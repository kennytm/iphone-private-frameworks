/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

#import <Celestial/AVItem.h>

@class MPQueueFeeder, NSArray, MPAlternateTracks, NSURL, NSString;

@interface MPItem : AVItem {
	MPQueueFeeder* _feeder;
	MPAlternateTracks* _alternateTracks;
	unsigned _type;
	double _cachedDuration;
	double _cachedPlayableDuration;
	float _defaultPlaybackRate;
	unsigned _advancedDuringPlayback : 1;
	unsigned _handledFinishTime : 1;
	unsigned _hasPlayedThisSession : 1;
	unsigned _isOnDemandItem : 1;
	unsigned _wasCountedAsSkipped : 1;
	unsigned _isStreamable : 2;
	unsigned _useCachedPlayableDuration : 1;
	unsigned _watchingAttributes : 1;
	unsigned _videoDisabled : 1;
	unsigned _lyricsAvailable : 1;
}
@property(readonly, retain, nonatomic) MPAlternateTracks* alternateTracks;
@property(assign, nonatomic) MPQueueFeeder* feeder;
@property(assign, nonatomic) float defaultPlaybackRate;
@property(readonly, assign, nonatomic) BOOL externalProtectionEnabled;
@property(readonly, assign, nonatomic) BOOL requiresExternalProtection;
@property(readonly, assign, nonatomic) BOOL wantsSubtitles;
@property(readonly, assign, nonatomic) float userRating;
@property(readonly, assign, nonatomic) unsigned contentUniqueID;
@property(readonly, assign, nonatomic) unsigned type;
@property(readonly, assign, nonatomic, getter=isStreamable) BOOL streamable;
@property(readonly, assign, nonatomic) double durationIfAvailable;
@property(readonly, assign, nonatomic) double playableDuration;
@property(readonly, retain, nonatomic) NSURL* podcastURL;
@property(readonly, retain, nonatomic) NSString* mainTitle;
@property(readonly, assign, nonatomic) BOOL hasDataForAlbumArtwork;
@property(readonly, assign, nonatomic) BOOL hasDataForItemArtwork;
@property(readonly, retain, nonatomic) NSString* albumArtist;
@property(readonly, retain, nonatomic) NSString* artist;
@property(readonly, retain, nonatomic) NSString* album;
@property(readonly, assign, nonatomic) BOOL hasDisplayableText;
@property(readonly, assign, nonatomic) BOOL displayableTextLoaded;
@property(readonly, retain, nonatomic) NSString* displayableText;
@property(readonly, retain, nonatomic) NSArray* urlTimeMarkers;
@property(readonly, retain, nonatomic) NSArray* artworkTimeMarkers;
@property(readonly, retain, nonatomic) NSArray* chapterTimeMarkers;
@property(assign, nonatomic, getter=isVideoDisabled) BOOL videoDisabled;
@property(readonly, assign, nonatomic) double currentTimeDisplayOverride;
@property(readonly, assign, nonatomic) unsigned indexInQueueFeeder;
@property(readonly, assign, nonatomic) unsigned countForQueueFeeder;
@property(assign, nonatomic) BOOL isOnDemandItem;
@property(assign, nonatomic) BOOL hasPlayedThisSession;
+(unsigned)defaultScaleMode;
+(void)setDefaultScaleMode:(unsigned)mode;
-(BOOL)allowAutoChangingScaleModeToFill;
-(instancetype)init;
-(instancetype)initWithPath:(id)path error:(id*)error;
-(void)dealloc;
-(void)flushNowPlayingCaches;
-(void)resetBookkeeping;
-(void)setAlternateAudioTrackID:(unsigned)anId;
-(void)setPlaybackStoppedTime:(double)time;
-(void)notePlaybackFinishedByHittingEnd;
-(void)setPlaybackCheckpointCurrentTime:(double)time;
-(void)setPlaybackFinishedTime:(double)time;
-(void)setRating:(float)rating;
-(void)setSubtitleTrackID:(unsigned)anId;
-(void)setUserAdvancedDuringPlayback:(BOOL)playback;
-(void)setUserEnabledSubtitles:(BOOL)subtitles;
-(void)setUserSkippedPlayback:(BOOL)playback;
-(BOOL)userSkippedPlayback;
-(double)duration;
-(void)setupPlaybackInfo;
-(void)updateAttributesForDefaultsChange:(id)defaultsChange;
-(void)postDurationDidChange;
-(BOOL)isPlaceholderForItem:(id)item;
-(BOOL)hasAlternatesForTypes:(unsigned)types;
-(id)largeArtworkInfoForTime:(double)time;
-(id)mediumArtworkInfoForTime:(double)time;
-(float)playbackRateForLevel:(unsigned)level direction:(int)direction paused:(BOOL)paused;
-(float)scanIntervalForLevel:(unsigned)level paused:(BOOL)paused;
-(void)setOverrideDuration:(double)duration;
-(id)smallArtworkInfoForTime:(double)time;
-(id)chapterTimeMarkerForTime:(double)time;
-(id)artworkTimeMarkerForTime:(double)time;
-(id)urlTimeMarkerForTime:(double)time;
-(id)titlesForTime:(double)time;
-(void)_delayedInvalidateCachedPlayedDuration;
-(void)_itemAttributeAvailableNotification:(id)notification;
-(void)_commonInit;
-(void)_updateForNaturalSizeChange;
-(void)_sizeChangedNotification:(id)notification;
-(void)_itemReadyToPlayNotification:(id)playNotification;
@end

