/**
 * This header is generated by class-dump-z 0.2-1.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DataAccess.framework/DataAccess
 */

#import "DATask.h"
#import "DataAccess-Structs.h"
#import <Foundation/NSObject.h>
#import <CoreFoundation/CFUserNotification.h>

@class ASTaskManager, DATaskManager, NSHTTPURLResponse, NSURLConnection, NSURLRequest, NSString, ASItem, NSError, ASParseContext, NSMutableSet;

@interface ASTask : NSObject <DATask> {
	BOOL _haveSwitchedCodePage;
	BOOL _haveParsedCommand;
	ASItem* _currentlyParsingItem;
	id _delegate;
	NSHTTPURLResponse* _response;
	ASParseContext* _parseContext;
	NSURLConnection* _connection;
@private
	NSURLRequest* _request;
	NSMutableSet* _attemptedIdentities;
	BOOL _isFakingIt;
	BOOL _didSendRequest;
	BOOL _didFailWithError;
	BOOL _didCancel;
	BOOL _didReceiveResponse;
	BOOL _didReceiveData;
	BOOL _didFinishLoading;
	BOOL _didReset;
	BOOL _finished;
	BOOL _inDelegateCallout;
	BOOL _forceEDGE;
	void* _context;
	BOOL _isExclusive;
	BOOL _receivedBadPasswordResponse;
	BOOL _askedToCancelWhileModal;
	int _taskID;
	ASTaskManager* _taskManager;
	int _modalReason;
	int _modalPushCount;
	NSString* _lastKnownPolicyKey;
	CFUserNotificationRef _passwordNotification;
	CFRunLoopSourceRef _passwordNotificationRunLoopSource;
	CFStringRef _passwordNotificationRunLoopModes;
	NSError* _passwordNotificationError;
	NSString* _lastKnownPassword;
@protected
	BOOL _retry;
}
@property(assign, nonatomic) DATaskManager* taskManager;
@property(assign, nonatomic) id delegate;
@property(assign, nonatomic) void* context;
@property(assign, nonatomic) BOOL forceEDGETransport;
@property(assign, nonatomic) BOOL isExclusive;
@property(retain, nonatomic) ASItem* currentlyParsingItem;
@property(assign, nonatomic) BOOL askedToCancelWhileModal;
@property(retain, nonatomic) NSString* lastKnownPassword;
+(unsigned)uniqueQueryID;
+(void)_setDefaultTaskTimeout:(double)timeout;
+(void)_restoreDefaultTaskTimeout;
// inherited: -(instancetype)init;
// inherited: -(void)dealloc;
// in a protocol: -(id)description;
-(id)responseContentType;
-(int)taskID;
-(id)httpMethod;
-(BOOL)_shouldAuth;
-(double)timeoutInterval;
-(id)_url;
-(id)_easVersion;
-(id)_policyKey;
-(BOOL)_isWBXML;
-(BOOL)expectsWBXML;
-(id)command;
-(int)commandCode;
-(id)parameterData;
-(id)requestBodyStream;
-(id)requestBody;
-(BOOL)processContext:(id)context;
-(double)percentComplete;
-(int)taskStatusForExchangeStatus:(int)exchangeStatus;
-(int)taskStatusForError:(id)error;
-(id)contentType;
-(void)willProcessContext;
-(void)didProcessContext:(id)context;
-(BOOL)shouldLogIncomingData;
-(BOOL)requiresEASVersionInformaton;
// in a protocol: -(BOOL)shouldHoldPowerAssertion;
// in a protocol: -(id)powerAssertionGroupIdentifier;
-(int)connectionActionForResponse:(id)response;
-(void)loadRequest:(id)request;
-(void)tearDownResources;
-(id)_createBodyData;
-(void)_failImmediately;
// in a protocol: -(void)performTask;
-(void)_pushModalForReason:(int)reason;
-(void)_popModal;
// in a protocol: -(void)startModal;
-(void)taskManagerDidFindEASVersion;
-(void)taskManagerDidUpdatePolicyKey;
-(void)taskManagerDidFailToUpdatePolicyKey;
-(void)_continuePerformTask;
-(BOOL)attemptRetryWithStatus:(int)status error:(id)error;
-(void)willCallOutToDelegate;
-(void)didCallOutToDelegate;
-(BOOL)isInCallOutToDelegate;
-(void)finishWithError:(id)error;
// in a protocol: -(void)cancelTaskWithReason:(int)reason underlyingError:(id)error;
-(id)_applyAuthenticationChain:(CFArrayRef)chain toRequest:(id)request;
-(BOOL)shouldAllowTrust:(SecTrust*)trust forHost:(id)host;
-(void)_tearDownPasswordNotification;
-(void)_handleBadPasswordResponse;
-(void)_handlePasswordNotificationResponse:(unsigned long)response;
-(BOOL)_handleCertificateError:(id)error;
-(BOOL)_handleRedirect:(id)redirect;
-(void)connection:(id)connection didReceiveData:(id)data;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)_initFakeParseContext;
-(void)reset;
@end

