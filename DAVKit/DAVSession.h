/**
 * This header is generated by class-dump-z 0.2-1.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DAVKit.framework/DAVKit
 */

#import <Foundation/NSObject.h>
#import "AYGroup.h"
#import "DAVSession.h"
#import "DAVKit-Structs.h"

@class NSMutableSet, NSLock, NSString, NSMutableArray, NSMutableDictionary, AYAddress;
@protocol DAVAuthStore;

@interface DAVSession : NSObject <AYGroup> {
	NSString* _scheme;
	NSString* _host;
	AYAddress* _address;
	int _port;
	BOOL _bypassProxies;
	BOOL _builtinRedirect;
	NSString* _userAgent;
	NSString* _acceptEncoding;
	NSString* _username;
	NSString* _password;
	unsigned _readTimeOut;
	id _delegate;
	NSMutableDictionary* _privateInfos;
	NSMutableSet* _adapters;
	int _bufferSize;
	NSLock* _sessionLock;
	int _numWorkerThread;
	id<DAVAuthStore> _authStore;
	id _simpleAuthStore;
	void* _davReserved;
	BOOL _useKerberos;
	BOOL _supportsDigest;
	BOOL _useAuth;
	NSMutableArray* _trustedCerts;
	NSLock* _certUILock;
	BOOL _bypassCheckingServerTrust;
	id _certificateDelegate;
}
// inherited: +(void)initialize;
+(id)sessionWithScheme:(id)scheme host:(id)host port:(int)port;
+(id)sessionWithURL:(id)url;
+(void)setMaxRedirection:(int)redirection;
+(void)setMaxWorkerThreadsPerSession:(int)session;
+(void)setProxiesDelegate:(id)delegate;
+(void)setDefaultUserAgent:(id)agent;
+(id)defaultUserAgent;
+(void)setDefaultAcceptEncoding:(id)encoding;
+(id)defaultAcceptEncoding;
-(instancetype)initWithScheme:(id)scheme host:(id)host port:(int)port;
-(instancetype)initWithURL:(id)url;
// inherited: -(void)dealloc;
// inherited: -(void)finalize;
// in a protocol: -(id)description;
-(id)scheme;
-(id)host;
-(int)port;
-(id)URLToURI:(id)uri;
-(void)setBuiltinRedirect:(BOOL)redirect;
-(BOOL)isBuiltinRedirect;
-(void)setAuthStore:(id)store;
-(void)clearAuthChallenge;
-(void)addAdapter:(id)adapter;
-(void)setInfo:(id)info forKey:(id)key;
-(id)infoForKey:(id)key;
-(void)setDelegate:(id)delegate;
-(void)setUsername:(id)username andPassword:(id)password;
-(id)username;
-(id)password;
-(BOOL)hasCredentials;
-(void)setLockOwner:(id)owner;
-(id)lockOwner;
-(id)lock;
-(void)setReadTimeOut:(unsigned)anOut;
-(unsigned)readTimeOut;
-(void)setUserAgent:(id)agent;
-(id)userAgent;
-(id)acceptEncoding;
-(void)setBypassProxies:(BOOL)proxies;
-(BOOL)isBypassProxies;
-(void)setKeepAlive:(BOOL)alive;
-(BOOL)keepAlive;
-(int)workerThreadsCount;
// in a protocol: -(BOOL)operationShouldBeLaunchedNow:(id)operation;
// in a protocol: -(void)operationHasEnded:(id)ended;
-(BOOL)bypassCheckingServerTrust;
-(void)setBypassCheckingServerTrust:(BOOL)trust;
-(void)setCertificateDelegate:(id)delegate;
-(id)certificateDelegate;
@end

@interface DAVSession (Internal)
-(void)notifyAdaptersRequestCreated:(id)created;
-(void)notifyAdaptersRequestDestroyed:(id)destroyed;
-(id)getNewRequestMessage:(CFHTTPMessageRef*)message andStream:(CFReadStreamRef*)stream forRequest:(id)request;
-(long)bufferSize;
-(void)correctBufferSizeWithSize:(long)size;
-(void)setUseKerberos:(BOOL)kerberos;
-(BOOL)useKerberos;
-(void)setSupportsDigest:(BOOL)digest;
-(BOOL)supportsDigest;
-(void)setUseAuth:(BOOL)auth;
-(BOOL)useAuth;
-(id)trustedCerts;
-(void)setTrustedCerts:(id)certs;
-(void)removeTrustedCerts;
@end

