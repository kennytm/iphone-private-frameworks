/**
 * This header is generated by class-dump-z 0.2-1.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: /System/Library/PrivateFrameworks/DAVKit.framework/DAVKit
 */

#import "DAVRequest.h"
#import "DAVKit-Structs.h"
#import "AYOperation.h"
#include <CFNetwork/CFNetwork.h>

@class NSMutableSet, NSDictionary, NSData, NSMutableData, NSString, DAVSession, NSMutableDictionary;

@interface DAVRequest : AYOperation {
	CFHTTPMessageRef _requestMessage;
	CFHTTPMessageRef _responseMessage;
	CFReadStreamRef _readStream;
	CFReadStreamRef _bodyStream;
	CFHostClientContext _clientContext;
	DAVSession* _session;
	NSString* _method;
	NSString* _uri;
	NSMutableSet* _bodyReaders;
	NSMutableSet* _acceptingReaders;
	NSMutableDictionary* _requestHeaders;
	NSDictionary* _headers;
	NSString* _httpStatus;
	unsigned _httpStatusCode;
	NSMutableData* _httpResponseBody;
	NSMutableDictionary* _attemptDictionary;
	NSData* _requestBodyData;
	long long _contentLength;
	long long _readLength;
	long long _requestLength;
	long long _putLength;
	id _delegate;
	void* _davReserved;
	int _certificatePolicy;
	BOOL _useKerberos;
	BOOL _checkedServerTrust;
}
// inherited: +(void)initialize;
+(id)requestWithURL:(id)url method:(id)method;
+(id)requestWithSession:(id)session method:(id)method path:(id)path;
+(id)requestWithSession:(id)session method:(id)method URI:(id)uri;
-(instancetype)initWithURL:(id)url method:(id)method;
-(instancetype)initWithSession:(id)session method:(id)method path:(id)path;
-(instancetype)initWithSession:(id)session method:(id)method URI:(id)uri;
// inherited: -(void)dealloc;
// inherited: -(void)finalize;
// inherited: -(id)description;
-(id)session;
-(id)method;
-(id)uri;
-(id)url;
-(void)setRequestBodyWithData:(id)data;
-(void)setRequestBodyWithString:(id)string encoding:(unsigned)encoding;
-(void)setHeader:(id)header withValue:(id)value;
-(id)requestHeaders;
-(void)addResponseBodyReader:(id)reader;
-(void)grantRequestWithLockToken:(id)lockToken;
-(void)grantRequestWithLockTokens:(id)lockTokens;
// inherited: -(void)setError:(id)error;
-(BOOL)isNegoHeader:(id)header;
-(BOOL)initAuthGSS;
-(BOOL)stepAuthGSS:(id)gss;
-(void)initBeforeDispatch;
-(void)dispatch;
-(id)httpStatus;
-(int)httpStatusCode;
-(id)responseHeaders;
-(id)responseBody;
-(id)responseBodyString;
-(long long)responseContentLength;
-(long long)readLength;
// inherited: -(long long)operationProgress;
// inherited: -(long long)operationTotal;
-(long long)requestLength;
-(id)requestBody;
-(long long)putLength;
-(BOOL)useKerberos;
-(char*)getToken;
-(BOOL)supportsDigest;
-(id)acceptingReaders;
// inherited: -(void)finalizeOperation;
@end

@interface DAVRequest (DAVMultiStatusRequest)
+(id)multiStatusRequestWithURL:(id)url method:(id)method;
+(id)multiStatusRequestWithSession:(id)session method:(id)method path:(id)path;
+(id)multiStatusRequestWithSession:(id)session method:(id)method URI:(id)uri;
+(id)multiStatusRequestWithURL:(id)url method:(id)method responseClass:(Class)aClass;
+(id)multiStatusRequestWithSession:(id)session method:(id)method path:(id)path responseClass:(Class)aClass;
+(id)multiStatusRequestWithSession:(id)session method:(id)method URI:(id)uri responseClass:(Class)aClass;
+(id)propFindRequestWithURL:(id)url withDepth:(id)depth lookingForProps:(id)props;
+(id)propFindRequestWithSession:(id)session withDepth:(id)depth path:(id)path lookingForProps:(id)props;
+(id)propFindRequestWithSession:(id)session withDepth:(id)depth URI:(id)uri lookingForProps:(id)props;
+(id)propFindRequestWithSession:(id)session withDepth:(id)depth URI:(id)uri lookingForProps:(id)props responseReader:(id)reader;
+(id)propPatchRequestWithURL:(id)url patchProperties:(id)properties deleteProperties:(id)properties3;
+(id)propPatchRequestWithSession:(id)session path:(id)path patchProperties:(id)properties deleteProperties:(id)properties4;
-(void)_initReaderWithClass:(Class)aClass;
-(instancetype)initMultiStatusRequestWithURL:(id)url method:(id)method;
-(instancetype)initMultiStatusRequestWithSession:(id)session method:(id)method path:(id)path;
-(instancetype)initMultiStatusRequestWithSession:(id)session method:(id)method URI:(id)uri;
-(instancetype)initMultiStatusRequestWithURL:(id)url method:(id)method responseClass:(Class)aClass;
-(instancetype)initMultiStatusRequestWithSession:(id)session method:(id)method path:(id)path responseClass:(Class)aClass;
-(instancetype)initMultiStatusRequestWithSession:(id)session method:(id)method URI:(id)uri responseClass:(Class)aClass;
-(instancetype)initMultiStatusRequestWithSession:(id)session method:(id)method URI:(id)uri responseReader:(id)reader;
-(id)responses;
-(void)_initForPropFindWithDepth:(id)depth lookingForProps:(id)props;
-(instancetype)initPropFindWithURL:(id)url withDepth:(id)depth lookingForProps:(id)props;
-(instancetype)initPropFindWithSession:(id)session withDepth:(id)depth path:(id)path lookingForProps:(id)props;
-(instancetype)initPropFindWithSession:(id)session withDepth:(id)depth URI:(id)uri lookingForProps:(id)props;
-(instancetype)initPropFindWithSession:(id)session withDepth:(id)depth URI:(id)uri lookingForProps:(id)props responseReader:(id)reader;
-(void)_initForPropPatchWithPatchDict:(id)patchDict deleteProperties:(id)properties;
-(instancetype)initPropPatchWithURL:(id)url patchProperties:(id)properties deleteProperties:(id)properties3;
-(instancetype)initPropPatchWithSession:(id)session path:(id)path patchProperties:(id)properties deleteProperties:(id)properties4;
-(instancetype)initPropPatchWithSession:(id)session URI:(id)uri patchProperties:(id)properties deleteProperties:(id)properties4;
@end

@interface DAVRequest (SSL)
+(BOOL)allowsAnyHTTPSCertificateForHost:(id)host;
+(void)setAllowsAnyHTTPSCertificateForHost:(id)host value:(BOOL)value;
+(int)defaultCertificatePolicy;
+(void)setDefaultCertificatePolicy:(int)policy;
-(int)certificatePolicy;
-(void)setCertificatePolicy:(int)policy;
-(void)setTrustedCertsOnReadStream:(id)stream;
-(void)setSSLPropertiesOnReadStream;
@end

@interface DAVRequest (Private)
-(unsigned char)_bodyStreamOpen:(XXStruct_K5nmsA*)open openComplete:(char*)complete;
-(long)_bodyStreamRead:(char*)read bufferLength:(long)length error:(XXStruct_K5nmsA*)error atEOF:(char*)eof;
-(unsigned char)_bodyStreamCanRead;
-(BOOL)_computeHeaders;
-(id)retryOperationAfterSSLError:(int)error;
-(void)displayCertPanel:(id)panel;
-(BOOL)shouldContinueAfterCheckingServerTrust;
-(void)_readStreamEvent:(unsigned long)event;
-(BOOL)_initHTTPRequest;
// inherited: -(void)endOperationWithError:(id)error;
// inherited: -(BOOL)isRunLoopBased;
-(id)getErrorFromHTTPStatus;
@end

@interface DAVRequest (Internal)
-(CFHTTPMessageRef)lastResponseMessage;
-(CFHTTPMessageRef)lastRequestMessage;
-(int)attemptForHTTPCode:(int)httpcode;
-(BOOL)setCertificatePolicyOnStream:(CFReadStreamRef)stream;
-(CFReadStreamRef)newStreamWithRequestMessage:(CFHTTPMessageRef)requestMessage;
@end

@interface DAVRequest (DAVSession)
-(void)setUsername:(id)username andPassword:(id)password;
-(id)username;
-(id)password;
@end

